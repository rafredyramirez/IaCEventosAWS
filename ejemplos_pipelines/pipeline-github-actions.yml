name: Deploy to AWS

on:
  push:
    branches:
      - main # Define en qu√© ramas activar el despliegue

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Zip and upload Lambda functions to S3
        run: |
          # Comprimir y subir archivos a S3
          zip -r lambda_function_attendee_register.zip lambda_function_attendee_register.py
          zip -r lambda_function_register_confirmation.zip lambda_function_register_confirmation.py
          zip -r authorizer.zip authorizer.py
          zip -r lambdaFunctionCreateEvent.zip lambdaFunctionCreateEvent.py
          zip -r lambdaFunctionDeleteEvent.zip lambdaFunctionDeleteEvent.py
          zip -r lambdaFunctionEditEvent.zip lambdaFunctionEditEvent.py
          zip -r lambdaFunctionViewEvent.zip lambdaFunctionViewEvent.py

          aws s3 cp lambda_function_attendee_register.zip s3://${{ secrets.S3_BUCKET }}/lambda_function_attendee_register.zip
          aws s3 cp lambda_function_register_confirmation.zip s3://${{ secrets.S3_BUCKET }}/lambda_function_register_confirmation.zip
          aws s3 cp authorizer.zip s3://${{ secrets.S3_BUCKET }}/authorizer.zip
          aws s3 cp lambdaFunctionCreateEvent.zip s3://${{ secrets.S3_BUCKET }}/lambdaFunctionCreateEvent.zip
          aws s3 cp lambdaFunctionDeleteEvent.zip s3://${{ secrets.S3_BUCKET }}/lambdaFunctionDeleteEvent.zip
          aws s3 cp lambdaFunctionEditEvent.zip s3://${{ secrets.S3_BUCKET }}/lambdaFunctionEditEvent.zip
          aws s3 cp lambdaFunctionViewEvent.zip s3://${{ secrets.S3_BUCKET }}/lambdaFunctionViewEvent.zip

          # Subir archivos de stacks anidados a S3
          aws s3 cp stack-lambdas-DynamoDB-events.yml s3://${{ secrets.S3_BUCKET }}/stack-lambdas-DynamoDB-events.yml
          aws s3 cp stack-attendee-register.yml s3://${{ secrets.S3_BUCKET }}/stack-attendee-register.yml
          aws s3 cp stack-lightsail.yml s3://${{ secrets.S3_BUCKET }}/stack-lightsail.yml
          aws s3 cp stack-api-gateway.yml s3://${{ secrets.S3_BUCKET }}/stack-api-gateway.yml

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file main-stack.yml \
            --stack-name NestedStackMain \
            --parameter-overrides \
              SourceCodeBucketName=${{ secrets.S3_BUCKET }} \
              EventRegistersBucketName=${{ secrets.EVENT_REGISTERS_BUCKET_NAME }} \
              SESVerifiedSenderEmailIdentityName=${{ secrets.SES_VERIFIED_SENDER_EMAIL_IDENTITY_NAME }} \
              SESVerifiedDestinationEmailIdentityName=${{ secrets.SES_VERIFIED_DESTINATION_EMAIL_IDENTITY_NAME }} \
              StageDeploy=${{ secrets.STAGE_DEPLOY }} \
              InstanceName=${{ secrets.INSTANCE_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM
