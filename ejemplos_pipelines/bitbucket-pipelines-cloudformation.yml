#se usa esta imagen porque ya tiene unificada la herramienta de linea de comandos de AWS
image: amazon/aws-cli 

definitions:

  #Se definieron dos steps: uno para desplegar infra y otro para desplegar el codigo de las lambda
  steps:
    - step: &deploy-infrastructure  # Paso reutilizable para desplegar la infraestructura
        name: "Desplegar infra"
        script:
          - cd iac # carpeta donde se encuentra la plantilla de cloudformation

          # comando cloudformation para desplegar la infraestructura
          - aws cloudformation deploy --stack-name $STACK_NAME --template-file iac-cloudformation.yml --parameter-overrides StackName=$STACK_NAME EventManagementLambdaMemorySize=$EVENT_MANAGEMENT_LAMBDA_MEMORY_SIZE EventManagementLambdaTimeout=$EVENT_MANAGEMENT_LAMBDA_TIMEOUT ApiGatewayStageName=$API_GATEWAY_STAGE_NAME --capabilities CAPABILITY_NAMED_IAM --region $AWS_DEFAULT_REGION

    - step: &deploy-lambda  # Paso reutilizable para desplegar la Lambda
        name: "Desplegar codigo de la Lambda"
        script:
          # Instalar Python 3 y pip3
          - yum install -y python3

          # Verificar si pip3 está instalado, y si no, instalarlo
          - python3 -m ensurepip --upgrade

          # Instalar zip
          - yum install -y zip

          # Verificar la instalación de python3
          - python3 --version  # Verificar que AWS CLI esté disponible

          # Verificar la instalación de zip
          - zip --version  # Verificar que zip esté instalado correctamente

          # Instalar dependencias de Python
          - cd src
          - pip3 install -r requirements.txt  # Instalar dependencias de Python

          - cd lambdas
          - zip -r lambda.zip index.py #se comprime el archivo python con el codigo fuente

          #comando sdk para actualizar el codigo de la lambda
          - aws lambda update-function-code --function-name EventManagementLambda-$STACK_NAME --zip-file fileb://lambda.zip

pipelines:
  #Pipelines manuales para el despliegue de la infraestructura, si la infraestructura no existe aun, se crea la lambda con un codigo base.
  #Se definieron 4 pipelines manuales para desplegar en diferentes ambientes DEV, QA, UAT, PROD

  custom:
    #despliegue de la infraestructura en ambiente de desarrollo
    infra-dev:
      - step:
          name: "Desplegar infraestructura en DEV"
          deployment: dev  # Despliegue en desarrollo
          <<: *deploy-infrastructure  # Reutilizamos el paso definido en definitions

    #despliegue de la infraestructura en ambiente QA
    infra-qa:
      - step:
          name: "Desplegar infraestructura en QA"
          deployment: qa  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-infrastructure  # Reutilizamos el paso definido en definitions

    #despliegue de la infraestructura en ambiente STAGING
    infra-staging:
      - step:
          name: "Desplegar infraestructura en STAGING"
          deployment: uat  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-infrastructure  # Reutilizamos el paso definido en definitions

    #despliegue de la infraestructura en ambiente de PRODUCCION
    infra-prod:
      - step:
          name: "Desplegar infraestructura en PROD"
          deployment: prod  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-infrastructure  # Reutilizamos el paso definido en definitions

  # Pipelines automaticos (excepto para prod) para despliegue de código basado en ramas
  # Estos pipeline NO despiegan infra, solo codigo
  # Se definieron 4 ramas, dev, qa, uat, main. Siendo main la rama que se despliegua a produccion
  branches:
    #despliegue del código en ambiente de desarrollo
    dev:
      - step:
          name: "Desplegar código en DEV"
          deployment: dev  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-lambda  # Reutilizamos el paso definido en definitions

    #despliegue del código en ambiente de QA
    qa:
      - step:
          name: "Desplegar código en QA"
          deployment: qa  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-lambda  # Reutilizamos el paso definido en definitions

    #despliegue del código en ambiente de staging
    uat:
      - step:
          name: "Desplegar código en STAGING"
          deployment: uat  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-lambda  # Reutilizamos el paso definido en definitions

    #despliegue del código en ambiente de produccion
    #este pipeline es manual, ya que despliegues a produccion involucran un proceso de release mas elaborado
    main:
      - step:
          name: "Paso inicial"
          script:
            - echo usualmente aca se realizaria algun paso previo, como crear un TAG
      - step:
          name: "Desplegar código en PRODUCCION"
          trigger: manual
          deployment: prod  # este valor debe estar creado en los deployments de bitbucket
          <<: *deploy-lambda  # Reutilizamos el paso definido en definitions
