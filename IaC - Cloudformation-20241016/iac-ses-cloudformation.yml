# --- Información sobre Amazon SES y CloudFormation ---
# 
# 1. **Sobre Amazon SES**:
#    Amazon SES (Simple Email Service) permite enviar correos electrónicos de manera segura y escalable.
#    Sin embargo, el uso de SES está restringido por ciertos límites, dependiendo del estado de la cuenta:
#    
#    - **Entorno Sandbox** (por defecto):
#      - Todas las cuentas de SES nuevas comienzan en el entorno **sandbox**.
#      - Limitaciones en el sandbox:
#        - Solo puedes enviar correos a direcciones **verificadas**, tanto de **origen** como de **destino**.
#        - Cantidades limitadas de correos por día y por segundo.
#        - No puedes enviar correos a destinatarios no verificados.
#      - **Razón de las limitaciones**: 
#        - El entorno sandbox está diseñado para evitar abusos (como el envío masivo de spam) y permitir que los usuarios validen sus configuraciones antes de pasar a producción.
#        - Estas restricciones también protegen la reputación de los servidores de SES frente a listas negras de correo y aseguran que los servicios se utilicen de manera legítima.
#
#    - **Entorno de Producción**:
#      - Una vez que se ha comprobado el uso legítimo de SES, puedes solicitar la salida del sandbox a través de un caso de soporte en AWS.
#      - Beneficios del entorno de producción:
#        - Puedes enviar correos a cualquier dirección, **sin necesidad de verificarlas previamente**.
#        - Se incrementan los límites de envío de correos por día y por segundo.
#      - **Requisito**: Debes proporcionar detalles sobre el tipo de correos que enviarás para que AWS verifique que el servicio será utilizado correctamente.
#
# 2. **Qué cubre esta plantilla**:
#    Esta plantilla de CloudFormation incluye lo siguiente:
#    - Verificación de la dirección de correo de **origen** (dirección desde la cual se enviarán los correos).
#    - Creación de una cola SQS para procesar los mensajes de eventos.
#    - Función Lambda que consume mensajes de SQS y envía correos electrónicos utilizando Amazon SES.
#    - Uso de una plantilla de correo electrónico SES predefinida (AWS::SES::Template) para personalizar los mensajes.
#
# 3. **Pasos manuales que debes realizar**:
#    - **Verificación de la dirección de destino**: Si tu cuenta de SES está en **sandbox**, debes verificar manualmente todas las direcciones de correo a las que enviarás correos. 
#      Esto se hace en la consola de SES ingresando la dirección de destino, quien deberá confirmar a través de un correo de verificación.
#    - **Solicitud de salida del sandbox**: Para poder enviar correos a cualquier dirección sin verificación, debes crear un caso de soporte en AWS para que tu cuenta pase a producción.
#
# 4. **Por qué estos pasos son manuales**:
#    - **Restricciones de seguridad**: La verificación de correos electrónicos en el entorno sandbox es necesaria para prevenir el abuso del servicio (por ejemplo, spam). 
#      SES requiere que los usuarios verifiquen manualmente las direcciones para asegurarse de que tienen permiso para enviar correos a esas direcciones.
#    - **Configuración de SES fuera de CloudFormation**: Actualmente, SES no permite realizar completamente la verificación de direcciones de destino a través de CloudFormation. Por esta razón, es necesario verificar algunas direcciones de forma manual.
#
# 5. **Cómo saber si estás en sandbox o producción**:
#    - Puedes verificar el estado de tu cuenta en SES yendo a la consola de SES en la sección "Sending Limits".
#    - Si estás en sandbox, verás restricciones sobre el número de correos permitidos y la necesidad de verificar las direcciones de destino.
#    - Si tu cuenta está en producción, no tendrás estas restricciones y podrás enviar correos a cualquier dirección sin verificarla.
#
# --- Información sobre AWS::Route53::RecordSetGroup ---
#
# 1. **¿Qué es AWS::Route53::RecordSetGroup?**:
#    - Este recurso de CloudFormation permite crear un grupo de registros DNS en Amazon Route 53.
#    - Un **record set** es una colección de registros DNS que apuntan a uno o varios dominios o subdominios.
#    - Se utiliza para administrar el mapeo de nombres de dominio a servicios como S3, CloudFront o una IP estática asociada a un servidor, por ejemplo.
#
# 2. **¿Cuándo usar AWS::Route53::RecordSetGroup?**:
#    - Se usa cuando necesitas asociar un nombre de dominio a un servicio que has desplegado en AWS.
#    - Por ejemplo, si tu aplicación tiene un dominio personalizado (como www.miapp.com), puedes usar este recurso para conectar ese dominio a tu infraestructura (API Gateway, S3, EC2, etc.).
#    - **Casos comunes**: 
#      - En aplicaciones web que usan un nombre de dominio personalizado.
#      - Cuando se necesita usar un dominio registrado en Route 53 para redirigir tráfico hacia recursos de AWS.
#
# 3. **¿Cuándo no usarlo?**:
#    - Si estás utilizando el correo electrónico de SES para enviar correos sin asociar un dominio personalizado (solo usando direcciones de Gmail, Outlook, etc.), **no necesitas este recurso**.
#    - Si solo deseas enviar correos electrónicos y no te importa el nombre de dominio del remitente (ej. una dirección de Gmail o cualquier otro dominio verificado sin un DNS público).
#
# 4. **Conclusión**:
#    - **No es necesario** agregar un `AWS::Route53::RecordSetGroup` en esta plantilla si solo vas a enviar correos desde SES sin un dominio personalizado.
#    - Úsalo si tu caso de uso involucra un nombre de dominio que necesita apuntar a servicios como API Gateway, S3, o EC2, pero **no es necesario para el envío de correos electrónicos desde SES**.
#
# --- Información sobre costos de Amazon SES ---
# 
# 1. **Costos de Amazon SES en el entorno Sandbox y Producción**:
#    - Amazon SES cobra **$0.10 por cada 1,000 correos electrónicos enviados**.
#    - Incluso si tu cuenta está en el entorno **sandbox**, se aplican estos costos para los correos que envíes a direcciones verificadas.
#    - En el entorno sandbox, puedes enviar hasta **200 correos electrónicos por día**, lo que mantiene los costos bajos.
#
# 2. **Ejemplos de costos**:
#    - **10 correos electrónicos enviados**: El costo sería aproximadamente **$0.001 USD**.
#    - **20 correos electrónicos enviados**: El costo sería aproximadamente **$0.002 USD**.
#
# 3. **Transferencia de datos**:
#    - Si los correos contienen archivos adjuntos, es posible que se apliquen costos de **transferencia de datos**.
#    - El **Free Tier** de AWS incluye **1 GB de transferencia de datos saliente por mes**, por lo que solo incurrirás en costos adicionales si superas este límite.
#
# 4. **Resumen**:
#    - Envíos pequeños, como entre 10 y 20 correos, tienen un costo **inferior a $0.01 USD** (menos de un centavo).
#    - La **capa gratuita** cubre la transferencia de datos saliente hasta **1 GB por mes**, lo que también minimiza los costos.


# comando para desplegar
# aws cloudformation deploy \
#     --template-file iac-ses-cloudformation.yml \
#     --stack-name MyEmailStack \
#     --capabilities CAPABILITY_NAMED_IAM \
#     --region us-west-2

# aws sqs send-message --queue-url <usar la url de la cola> --message-body '{
#   "email": "<agregar correo de destino>",
#   "name": "Nombre del Usuario",
#   "event_name": "Conferencia AWS",
#   "event_date": "2024-10-15"
# }'

AWSTemplateFormatVersion: '2010-09-09'

Resources:

  # Crear la cola SQS donde se almacenarán los mensajes de registro de eventos
  EventRegistrationQueue:
    Type: 'AWS::SQS::Queue'
    Properties: 
      QueueName: "EventRegistrationQueue"  # Nombre de la cola SQS

  # Crear el rol IAM para la función Lambda, que permite el acceso a SQS y SES
  LambdaSESExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'  # Lambda puede asumir este rol
            Action: 'sts:AssumeRole'  # Acción para asumir el rol
      Policies:
        - PolicyName: 'LambdaSESPolicy'  # Nombre de la política que permite acciones en SES y SQS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permisos para crear y gestionar logs en CloudWatch
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              # Permisos para enviar correos a través de SES
              - Effect: 'Allow'
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendTemplatedEmail'  # Permitir el uso de plantillas en SES
                  - 'ses:SendRawEmail'
                Resource: '*'  # Permitir acceso a cualquier identidad verificada en SES
              # Permisos para recibir y eliminar mensajes de la cola SQS
              - Effect: 'Allow'
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt EventRegistrationQueue.Arn  # Apunta al recurso SQS

  # Crear la función Lambda que consume mensajes de la cola SQS y envía correos electrónicos a través de SES
  EventRegistrationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "EventRegistrationLambda"  # Nombre de la función Lambda
      Runtime: python3.8                       # Ambiente de ejecución de la función (Python 3.8)
      Handler: index.lambda_handler           # Archivo y función de entrada que ejecutará Lambda
      Role: !GetAtt LambdaSESExecutionRole.Arn  # Rol que Lambda asumirá para ejecutar con permisos SES y SQS
      Code:
        ZipFile: |  # Código Python embebido directamente en la plantilla (sin usar S3)
          import json
          import boto3
          import os

          # Inicializar los clientes SES y SQS
          ses_client = boto3.client('ses')
          sqs_client = boto3.client('sqs')

          def lambda_handler(event, context):
              for record in event['Records']:  # Procesar cada mensaje de SQS
                  # Obtener el contenido del mensaje de SQS
                  message = json.loads(record['body'])
                  email = message['email']
                  name = message['name']
                  event_name = message['event_name']
                  event_date = message['event_date']

                  # Enviar un correo usando SES con la plantilla creada
                  response = ses_client.send_templated_email(
                      Source=os.environ['SENDER_EMAIL'],  # Correo verificado en SES (verificado manualmente)
                      Destination={
                          'ToAddresses': [email],  # Correo del destinatario
                      },
                      Template='EventConfirmationTemplate',  # Usar la plantilla SES creada
                      TemplateData=json.dumps({  # Datos que serán insertados en la plantilla SES
                          'name': name,
                          'event_name': event_name,
                          'event_date': event_date,
                          'event_organizer': 'AWS Team'
                      })
                  )
                  print(f'Correo enviado a {email}')  # Log para verificar el envío

      MemorySize: 128  # Memoria asignada a la función Lambda
      Timeout: 30  # Tiempo máximo de ejecución antes de que Lambda termine la ejecución
      Environment:  # Variables de entorno de Lambda
        Variables:
          SENDER_EMAIL: '<usar correo de envio>'  # Dirección de correo verificada en SES

  # Conectar la cola SQS con la Lambda
  SQSToLambdaEventSource:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10  # Número máximo de mensajes procesados por la Lambda en cada invocación
      EventSourceArn: !GetAtt EventRegistrationQueue.Arn  # ARN de la cola SQS que será consumida por la Lambda
      FunctionName: !GetAtt EventRegistrationLambda.Arn  # ARN de la función Lambda que será invocada al recibir mensajes en la cola SQS

  # Crear una plantilla de correo electrónico en SES
  EmailTemplate:
    Type: "AWS::SES::Template"
    Properties: 
      Template: 
        TemplateName: "EventConfirmationTemplate"  # Nombre de la plantilla SES
        SubjectPart: "Confirmación de Registro para {{event_name}}"  # Asunto del correo
        TextPart: |  # Parte del correo en formato texto plano
          Hola {{name}},
          
          Gracias por registrarte para el evento {{event_name}} que tendrá lugar el {{event_date}}.

          Saludos,
          El equipo de {{event_organizer}}
        HtmlPart: |  # Parte del correo en formato HTML
          <html>
          <body>
            <h1>Confirmación de Registro</h1>
            <p>Hola {{name}},</p>
            <p>Gracias por registrarte para el evento <strong>{{event_name}}</strong> que tendrá lugar el <strong>{{event_date}}</strong>.</p>
            <p>Saludos,<br/>El equipo de {{event_organizer}}</p>
          </body>
          </html>

  # Verificar una dirección de correo en SES para ser usada como origen en los correos
  SESVerifiedEmailIdentity:
    Type: "AWS::SES::EmailIdentity"
    Properties:
      EmailIdentity: "<usar correo de envio>"  # Correo que será verificado manualmente en SES para enviar correos

Outputs:
  # URL de la cola SQS creada
  EventRegistrationQueueURL:
    Description: 'URL de la cola SQS para registros de eventos'
    Value: !Ref EventRegistrationQueue

  # ARN de la función Lambda creada
  EventRegistrationLambdaARN:
    Description: 'ARN de la función Lambda que procesa los registros y envía correos'
    Value: !GetAtt EventRegistrationLambda.Arn

  # Nombre de la plantilla SES creada
  EmailTemplateName:
    Description: 'Nombre de la plantilla SES'
    Value: !Ref EmailTemplate

  # Dirección de correo verificada en SES
  VerifiedEmailIdentity:
    Description: 'Dirección de correo verificada para SES'
    Value: !Ref SESVerifiedEmailIdentity

# --- Fin de la plantilla --- 
