# crear el bucket para el codigo fuente, usar el nombre del bucket en el parametro S3SourceCodeBucketName
# aws cloudformation deploy \
#   --stack-name MyServerlessAppStack \
#   --template-file iac-cloudformation-Api-Lambda-DynamoDB.yml \
#   --parameter-overrides \
#       S3SourceCodeBucketName=sourcecode-course-ch31 \
#       S3SourceCodeZipFileEvent=events_management_lambda.zip \
#       S3SourceCodeZipFileUser=user_management_lambda.zip \
#       S3SourceCodeZipFileRegistration=registration_lambda.zip \
#       EventManagementLambdaMemorySize=128 \
#       EventManagementLambdaTimeout=20 \
#       UserManagementLambdaMemorySize=128 \
#       UserManagementLambdaTimeout=10 \
#       RegistrationLambdaMemorySize=256 \
#       RegistrationLambdaTimeout=15 \
#       ApiGatewayStageName=dev \
#   --capabilities CAPABILITY_NAMED_IAM \
#   --region us-west-2

# Tablas
# EventManagementTable
# Campos: EventId, EventName, EventDateTime, EventStatus, EventCountry, EventCity, EventLocation

# UserManagementTable
# Campos: UserId, UserNames, UserEmail

# RegistrationTable
# Campos: RegistrationId, RegistrationDateTime, RegistrationEventId, RegistrationUserId


AWSTemplateFormatVersion: '2010-09-09'
Description: Despliega varias funciones Lambda, tablas DynamoDB y un API Gateway con operaciones CRUD para la gestion de eventos y usuarios.

Parameters:
  S3SourceCodeBucketName:
    Type: String
    Description: Nombre del bucket de S3 que contiene el codigo de las Lambdas.
  S3SourceCodeZipFileEvent:
    Type: String
    Description: Nombre del archivo zip que contiene el codigo de la Lambda para gestion de eventos en S3.
  S3SourceCodeZipFileUser:
    Type: String
    Description: Nombre del archivo zip que contiene el codigo de la Lambda para gestion de usuarios en S3.
  S3SourceCodeZipFileRegistration:
    Type: String
    Description: Nombre del archivo zip que contiene el codigo de la Lambda para registro de eventos en S3.
  EventManagementLambdaMemorySize:
    Type: Number
    Default: 128
    Description: Tamano de la memoria para la funcion Lambda de gestion de eventos (en MB).
  UserManagementLambdaMemorySize:
    Type: Number
    Default: 128
    Description: Tamano de la memoria para la funcion Lambda de gestion de usuarios (en MB).
  RegistrationLambdaMemorySize:
    Type: Number
    Default: 128
    Description: Tamano de la memoria para la funcion Lambda de registro (en MB).
  EventManagementLambdaTimeout:
    Type: Number
    Default: 10
    Description: Tiempo de espera para la funcion Lambda de gestion de eventos (en segundos).
  UserManagementLambdaTimeout:
    Type: Number
    Default: 10
    Description: Tiempo de espera para la funcion Lambda de gestion de usuarios (en segundos).
  RegistrationLambdaTimeout:
    Type: Number
    Default: 10
    Description: Tiempo de espera para la funcion Lambda de registro (en segundos).
  ApiGatewayStageName:
    Type: String
    Default: dev
    Description: Nombre del stage en API Gateway (dev, test, prod, etc.).

Resources:

  # Politica para permitir que Lambda acceda al bucket S3 que se cree
  MyS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3SourceCodeBucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 
                - !GetAtt EventManagementLambdaRole.Arn  # Referencia al ARN del rol de la funcion Lambda de gestion de eventos
                - !GetAtt UserManagementLambdaRole.Arn   # Referencia al ARN del rol de la funcion Lambda de gestion de usuarios
                - !GetAtt RegistrationLambdaRole.Arn     # Referencia al ARN del rol de la funcion Lambda de registro
            Action: 's3:GetObject'
            Resource: !Sub "arn:aws:s3:::${S3SourceCodeBucketName}/*"

  # Definicion del Rol de la funcion EventManagementLambdaFunction
  EventManagementLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EventLambdaExecutionPolicy'  # Nombre unico para la politica de EventManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: 'Allow'  # Permite acceso especifico a la tabla DynamoDB de eventos
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EventManagementTable"
              - Effect: 'Allow'  # Permite acceso a elementos e indices secundarios de la tabla
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EventManagementTable/*"

  # Rol de la funcion UserManagementLambdaFunction
  UserManagementLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'UserLambdaExecutionPolicy'  # Nombre unico para la politica de UserManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: 'Allow'  # Permite acceso especifico a la tabla DynamoDB de usuarios
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UserManagementTable"
              - Effect: 'Allow'  # Permite acceso a elementos e indices secundarios de la tabla
                Action:
                  - 'dynamodb:Query'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UserManagementTable/*"

  # Rol de la funcion RegistrationLambdaFunction
  RegistrationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'RegistrationLambdaExecutionPolicy'  # Nombre unico para la politica de Registration
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: 'Allow'  # Permite acceso especifico a la tabla DynamoDB de registros
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/RegistrationTable"
              - Effect: 'Allow'  # Permite acceso a elementos e indices secundarios de la tabla
                Action:
                  - 'dynamodb:Query'
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/RegistrationTable/*"

  # Lambda para Event Management
  EventManagementLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'EventManagementLambda'
      Handler: 'events_management_lambda.lambda_handler'
      Runtime: python3.8
      Code:
        S3Bucket: !Ref S3SourceCodeBucketName
        S3Key: !Ref S3SourceCodeZipFileEvent
      MemorySize: !Ref EventManagementLambdaMemorySize
      Timeout: !Ref EventManagementLambdaTimeout
      Role: !GetAtt EventManagementLambdaRole.Arn

  # Lambda para User Management
  UserManagementLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'UserManagementLambda'
      Handler: 'users_management_lambda.lambda_handler'
      Runtime: python3.8
      Code:
        S3Bucket: !Ref S3SourceCodeBucketName
        S3Key: !Ref S3SourceCodeZipFileUser
      MemorySize: !Ref UserManagementLambdaMemorySize
      Timeout: !Ref UserManagementLambdaTimeout
      Role: !GetAtt UserManagementLambdaRole.Arn

  # Lambda para Registration
  RegistrationLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'RegistrationLambda'
      Handler: 'registration_lambda.lambda_handler'
      Runtime: python3.8
      Code:
        S3Bucket: !Ref S3SourceCodeBucketName
        S3Key: !Ref S3SourceCodeZipFileRegistration
      MemorySize: !Ref RegistrationLambdaMemorySize
      Timeout: !Ref RegistrationLambdaTimeout
      Role: !GetAtt RegistrationLambdaRole.Arn

  # Crear el rol de IAM para API Gateway con permisos de CloudWatch Logs
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      # Adjuntar la pol√≠tica administrada de AWS para CloudWatch Logs
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # Crear el grupo de logs en CloudWatch para API Gateway
  ApiGatewayLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/api-gateway/${ApiGatewayRestApi}"
      RetentionInDays: 14

  # API Gateway para las funciones Lambda
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'EventUserManagementAPI'
      Description: 'API Gateway para CRUD de Event Management y User Management Lambdas'

  # Recurso y m√©todos para Event Management
  ApiGatewayResourceEvent:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'event'
      RestApiId: !Ref ApiGatewayRestApi

  # CRUD para EventManagementLambda (POST, GET, PUT, DELETE)
  ApiGatewayMethodEventPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref ApiGatewayResourceEvent
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventManagementLambdaFunction.Arn}/invocations'

  ApiGatewayMethodEventGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: !Ref ApiGatewayResourceEvent
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventManagementLambdaFunction.Arn}/invocations'

  ApiGatewayMethodEventPut:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'PUT'
      ResourceId: !Ref ApiGatewayResourceEvent
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventManagementLambdaFunction.Arn}/invocations'

  ApiGatewayMethodEventDelete:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'DELETE'
      ResourceId: !Ref ApiGatewayResourceEvent
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventManagementLambdaFunction.Arn}/invocations'

  # Recurso y m√©todos para User Management
  ApiGatewayResourceUser:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'user'
      RestApiId: !Ref ApiGatewayRestApi

  # CRUD para UserManagementLambda (POST, GET, PUT, DELETE)
  ApiGatewayMethodUserPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref ApiGatewayResourceUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserManagementLambdaFunction.Arn}/invocations'

  ApiGatewayMethodUserGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: !Ref ApiGatewayResourceUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'GET'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserManagementLambdaFunction.Arn}/invocations'

  ApiGatewayMethodUserPut:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'PUT'
      ResourceId: !Ref ApiGatewayResourceUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'PUT'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserManagementLambdaFunction.Arn}/invocations'

  ApiGatewayMethodUserDelete:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'DELETE'
      ResourceId: !Ref ApiGatewayResourceUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'DELETE'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserManagementLambdaFunction.Arn}/invocations'

  # Recurso y m√©todo POST para Registration Management
  ApiGatewayResourceRegistration:
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: 'registration'
        RestApiId: !Ref ApiGatewayRestApi
  
  # CRUD para RegistrationManagementLambda (POST, GET, DELETE)
  ApiGatewayMethodGetRegistration:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: !Ref ApiGatewayResourceRegistration
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegistrationLambdaFunction.Arn}/invocations'

  ApiGatewayMethodPostRegistration:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref ApiGatewayResourceRegistration
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegistrationLambdaFunction.Arn}/invocations'

  ApiGatewayMethodDeleteRegistration:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: 'NONE'
      HttpMethod: 'DELETE'
      ResourceId: !Ref ApiGatewayResourceRegistration
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegistrationLambdaFunction.Arn}/invocations'

  # Despliegue del API Gateway en el stage especificado (dev, test, prod, etc.)
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: 
      - ApiGatewayMethodEventPost
      - ApiGatewayMethodEventGet
      - ApiGatewayMethodEventPut
      - ApiGatewayMethodEventDelete
      - ApiGatewayMethodUserPost
      - ApiGatewayMethodUserGet
      - ApiGatewayMethodUserPut
      - ApiGatewayMethodUserDelete
      - ApiGatewayMethodPostRegistration
      - ApiGatewayMethodGetRegistration
      - ApiGatewayMethodDeleteRegistration
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref ApiGatewayStageName

       
  # Permitir a API Gateway invocar Lambda para registro
  LambdaInvokePermissionRegistration:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RegistrationLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"

  # Permitir a API Gateway invocar Lambda para evento
  LambdaInvokePermissionEvent:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref EventManagementLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"

  # Permitir a API Gateway invocar Lambda para usuario
  LambdaInvokePermissionUser:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref UserManagementLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"
      
  # DynamoDB Table for Event Management
  EventManagementTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: EventManagementTable
      AttributeDefinitions:
        - AttributeName: EventId
          AttributeType: S
        - AttributeName: EventName
          AttributeType: S
        - AttributeName: EventDate
          AttributeType: S
        - AttributeName: EventStatus
          AttributeType: S
        - AttributeName: EventCountry
          AttributeType: S
        - AttributeName: EventCity
          AttributeType: S
      KeySchema:
        - AttributeName: EventId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: EventNameIndex
          KeySchema:
            - AttributeName: EventName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: EventCountryCityIndex
          KeySchema:
            - AttributeName: EventCountry
              KeyType: HASH
            - AttributeName: EventCity
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: EventStatusIndex
          KeySchema:
            - AttributeName: EventStatus
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: EventDateIndex
          KeySchema:
            - AttributeName: EventDate
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for User Management
  UserManagementTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: UserManagementTable
      BillingMode: PAY_PER_REQUEST  # Modo On-Demand
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: UserNames
          AttributeType: S
        - AttributeName: UserEmail
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserNamesIndex
          KeySchema:
            - AttributeName: UserNames
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: UserEmailIndex
          KeySchema:
            - AttributeName: UserEmail
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for Registration
  RegistrationTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: RegistrationTable
      BillingMode: PAY_PER_REQUEST  # Modo On-Demand
      AttributeDefinitions:
        - AttributeName: RegistrationId
          AttributeType: S
        - AttributeName: RegistrationDate
          AttributeType: S
        - AttributeName: RegistrationEventId
          AttributeType: S
        - AttributeName: RegistrationUserId
          AttributeType: S
      KeySchema:
            - AttributeName: RegistrationId
              KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: RegistrationDateIndex
          KeySchema:
            - AttributeName: RegistrationDate
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: RegistrationEventIdIndex
          KeySchema:
            - AttributeName: RegistrationEventId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: RegistrationUserIdIndex
          KeySchema:
            - AttributeName: RegistrationUserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

Outputs:
  LambdaFunctionNames:
    Description: "Nombres de las funciones Lambda"
    Value: !Join [', ', [!Ref EventManagementLambdaFunction, !Ref UserManagementLambdaFunction, !Ref RegistrationLambdaFunction]]

  DynamoDBTableNames:
    Description: "Nombres de las tablas dynamodb"
    Value: !Join [', ', [!Ref EventManagementTable, !Ref UserManagementTable, !Ref RegistrationTable]]

  ApiUrl:
    Description: "La URL base para acceder a los endpoints del API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/"
    Export:
      Name: "ApiUrl"

  EventEndpoints:
    Description: "Endpoints para gestionar eventos (GET, POST, PUT, DELETE)"
    Value: !Sub "GET, POST, PUT, DELETE: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/event"

  UserEndpoints:
    Description: "Endpoints para gestionar usuarios (GET, POST, PUT, DELETE)"
    Value: !Sub "GET, POST, PUT, DELETE: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/user"

  RegistrationEndpoints:
    Description: "Endpoints para gestionar registros (GET, POST, PUT, DELETE)"
    Value: !Sub "GET, POST, DELETE: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/registration"

# Comando para ver el output despues de desplegar la infraestructura
# aws cloudformation describe-stacks \
#   --stack-name MyServerlessAppStack \
#   --query "Stacks[0].Outputs"