# Esta plantilla de cloudformation Despliega una funcion Lambda con configuraciones personalizadas, el codigo de la funcionalidad esta en python, ademas de un apigateway para ejecutar a la lambda.

# Prerequisitos
# se debe crear un bucket S3 primero y cargar el codigo python en archivo zip
# el nombre del buchket debe ser reemplazdo en esta plantilla donde dice "nombre-del-bucket"
# el nombre del archivo zip con el codigo python debe ser reemplazado en esta plantilla donde dice "archivo-codigo" mantener la extension .zip

# A continuacion se presenta la estructura básica para crear el siguiente stack
# AWS Lambda, con configuraciones personalizadas y codigo de funcionalidad en python
# ApiGateway, con su recourso, stage, metodo y permisos para invocar la lambda
# Rol para la lambda con su respectiva politica
# Permisos para que lambda pueda acceder al bucket donde se encuentra el codigo python en el bucket de S3

# Para desplegar esta infraestructura use los comandos que se encuentran en el documento "Cloudformation comandos.txt"

AWSTemplateFormatVersion: '2010-09-09'
Description: Despliega una funcion Lambda con configuraciones personalizadas, el codigo de la funcionalidad esta en python, ademas de un apigateway para ejecutar a la lambda.

Resources:
  
  # Política para permitir que Lambda acceda al bucket S3 que se creo en los prerequisitos
  MyS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: nombre-del-bucket 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn  # Referencia al ARN del rol Lambda
            Action: 's3:GetObject'
            Resource: !Sub "arn:aws:s3:::nombre-del-bucket/*"  # Ruta a los objetos en S3

  # Definición de la función Lambda
  HelloLambdaFunction: 
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: HelloLambdaFunction
      Handler: lambda_function.handler  # Nombre del archivo y la función handler en Python
      Runtime: python3.8
      Code:
        S3Bucket: nombre-del-bucket  # Referencia al bucket creado en CloudFormation
        S3Key: archivo-codigo.zip  # Archivo zip subido a S3 que contiene el código
      MemorySize: 128  # Memoria personalizada para la Lambda (en MB)
      Timeout: 10  # Timeout personalizado de 10 segundos
      Role: !GetAtt LambdaExecutionRole.Arn  # Role que la función Lambda asumirá

  # Definición del IAM Role que la función Lambda va a asumir
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # Este bloque define la política de asunción del rol, es decir, quién o qué puede asumir este rol.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'  # La versión del documento de política
        Statement:
          - Effect: 'Allow'  # Permite la acción descrita
            Principal:
              Service: 'lambda.amazonaws.com'  # El servicio que asume este rol, en este caso Lambda
            Action: 'sts:AssumeRole'  # Acción que permite a Lambda asumir este rol

      # Aquí definimos las políticas que se adjuntarán al rol, otorgando permisos específicos a Lambda
      Policies:
        - PolicyName: 'LambdaBasicExecution'  # Nombre de la política personalizada
          PolicyDocument:
            Version: '2012-10-17'  # La versión del documento de política
            Statement:
              - Effect: 'Allow'  # Permite la acción descrita
                Action:
                  - 'logs:CreateLogGroup'  # Permite la creación de un grupo de logs en CloudWatch
                  - 'logs:CreateLogStream'  # Permite la creación de un stream de logs en CloudWatch
                  - 'logs:PutLogEvents'  # Permite escribir eventos de logs en CloudWatch
                Resource: '*'  # Aplica los permisos a todos los recursos (en este caso, a todos los grupos y streams de logs)

  # Definición del API Gateway que conectará con Lambda
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'HelloWorldAPI'
      Description: 'API Gateway para invocar Lambda Hello World'

  # Integración de Lambda con API Gateway
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'hello'  # El endpoint será /hello
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:  
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloLambdaFunction.Arn}/invocations'      

  # Permitir a API Gateway invocar Lambda
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref HelloLambdaFunction
      Principal: 'apigateway.amazonaws.com'

  # Definición de la salida (endpoint de la API)
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'test'      

Outputs:
  LambdaFunctionName:
    Description: 'Nombre de la función Lambda desplegada'
    Value: !Ref HelloLambdaFunction  # Output que muestra el nombre de la función Lambda
