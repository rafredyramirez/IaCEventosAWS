AWSTemplateFormatVersion: "2010-09-09"

Description: "Stack con los recursos necesarios para gestionar el registro de asistentes a eventos"

Parameters:
  SourceCodeBucketName:
    Type: String
    Default: "source-app-eventos-udm-test"
    Description: "Nombre del bucket donde se suben los zip con el codigo de las funciones lambda"

  EventRegistersBucketName:
    Type: String
    Default: "json-eventos-udm-test"
    Description: "Nombre del bucket para guardar los json de registro de asistentes a eventos"

  SESVerifiedSenderEmailIdentityName:
    Type: String
    Default: "ra.fredyramirez@gmail.com" #correo que emite el mensaje
    Description: "Correo que será verificado manualmente en SES para enviar correos"

  SESVerifiedDestinationEmailIdentityName:
    Type: String
    Default: "framirez965@soyudemedellin.edu.co" #receptor
    Description: "Correo que será verificado manualmente en SES para recibir correos"

  EventsTableArn:
    Type: String

  EventsTableName:
    Type: String

Resources:
  # Politica que permite a las funciones lambda acceder a su codigo fuente almacenado en S3
  LambdasSourceCodeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceCodeBucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            AWS:
              - !GetAtt ERCQLambdaExecutionRole.Arn # Referencia al ARN del rol Lambda
              - !GetAtt AttendeeRegisterLambdaExecutionRole.Arn # Referencia al ARN del rol Lambda
          Action:
            - "s3:GetObject"
          Resource: !Sub "arn:aws:s3:::${SourceCodeBucketName}/*" # Ruta a los objetos en S3

  # Cola SQS para recibir mensajes de confirmacion de registros a eventos
  EventRegisterConfirmationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "EventRegisterConfirmationQueue"

  # Bucket para guardar los json de registro de asistentes a eventos
  EventRegistersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref EventRegistersBucketName

  # Tabla para guardar los datos clave de los registros de los asistentes a los eventos
  EventRegistersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "event_registers"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: registration_id
          AttributeType: S
        - AttributeName: event_id
          AttributeType: S
        - AttributeName: attendee_id
          AttributeType: S
        - AttributeName: registration_date
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: registration_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EventIDIndex
          KeySchema:
            - AttributeName: event_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: AttendeeIDIndex
          KeySchema:
            - AttributeName: attendee_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: RegistrationDatendex
          KeySchema:
            - AttributeName: registration_date
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Tabla para guardar los datos de los asistentes a los eventos
  AttendeesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "attendees"
      BillingMode: PAY_PER_REQUEST # Modo On-Demand
      AttributeDefinitions:
        - AttributeName: attendee_id
          AttributeType: S
        - AttributeName: attendee_name
          AttributeType: S
        - AttributeName: attendee_email
          AttributeType: S
      KeySchema:
        - AttributeName: attendee_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AttendeeNameIndex
          KeySchema:
            - AttributeName: attendee_name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: AttendeeEmailIndex
          KeySchema:
            - AttributeName: attendee_email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Rol para la lambda que gestionara los mensajes de la cola de confirmaciones de registro a eventos
  ERCQLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow" # Permite la acción descrita
          Principal:
            Service: "lambda.amazonaws.com" # El servicio que asume este rol, en este caso Lambda
          Action:
            - "sts:AssumeRole" # Acción que permite a Lambda asumir este rol

      # Aquí definimos las políticas que se adjuntarán al rol, otorgando permisos específicos a Lambda
      Policies:
        - PolicyName: "ERCQLambdaExecution" # Nombre de la política personalizada
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow" # Permite la acción descrita
                Action:
                  - "logs:CreateLogGroup" # Permite la creación de un grupo de logs en CloudWatch
                  - "logs:CreateLogStream" # Permite la creación de un stream de logs en CloudWatch
                  - "logs:PutLogEvents" # Permite escribir eventos de logs en CloudWatch
                Resource: "*" # Aplica los permisos a todos los recursos descritos anteriormente
              - Effect: "Allow" # Permite la acción descrita
                Action:
                  - "sqs:ReceiveMessage" # Permite recibir los mensajes desde la cola
                  - "sqs:DeleteMessage" # Permite eliminar mensajes de la cola
                  - "sqs:GetQueueAttributes" # Permite obtener los atributos de la cola
                Resource: !GetAtt EventRegisterConfirmationQueue.Arn
              - Effect: "Allow"
                Action:
                  - "s3:PutObject" # Permite escribir objetos en el buckert de S# especificado
                Resource: !Sub "${EventRegistersBucket.Arn}/*"
              - Effect: "Allow"
                Action:
                  - "ses:SendEmail"
                  - "ses:SendTemplatedEmail" # Permitir el uso de plantillas en SES
                  - "ses:SendRawEmail"
                Resource: "*" # Permitir acceso a cualquier identidad verificada en SES

  # Politica para autorizar escritura en el bucket a la lambda a la que se le asignara el rol ERCQLambdaExecutionRole
  EventRegistersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EventRegistersBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt ERCQLambdaExecutionRole.Arn # Referencia al ARN del rol Lambda
            Action:
              - "s3:PutObject" # Permitir que la lambda con el rol indicado escriba en el bucket
            Resource: !Sub "${EventRegistersBucket.Arn}/*"

  # Crear una plantilla de correo electrónico en SES
  EmailTemplate:
    Type: "AWS::SES::Template"
    Properties:
      Template:
        TemplateName: "EventRegisterConfirmationTemplate" # Nombre de la plantilla SES
        SubjectPart: "Confirmación de Registro para {{name_event}}" # Asunto del correo
        TextPart: | # Parte del correo en formato texto plano
          Hola {{attendee_name}},

          Gracias por registrarte para el evento {{name_event}} que tendrá lugar el {{event_date}}.

          Saludos,
          El equipo de {{organizer}}
        HtmlPart: | # Parte del correo en formato HTML
          <html>
          <body>
            <h1>Confirmación de Registro</h1>
            <p>Hola {{attendee_name}},</p>
            <p>Gracias por registrarte para el evento <strong>{{name_event}}</strong> que tendrá lugar el <strong>{{event_date}}</strong>.</p>
            <p>Saludos,<br/>El equipo de {{organizer}}</p>
          </body>
          </html>

  # Verificar una dirección de correo en SES para ser usada como origen en los correos
  SESVerifiedSenderEmailIdentity:
    Type: "AWS::SES::EmailIdentity"
    Properties:
      EmailIdentity: !Ref SESVerifiedSenderEmailIdentityName

  # Verificar una dirección de correo en SES para ser usada como destino en los correos (por ser una PoC)
  SESVerifiedDestinationEmailIdentity:
    Type: "AWS::SES::EmailIdentity"
    Properties:
      EmailIdentity: !Ref SESVerifiedDestinationEmailIdentityName

  # Lambda que gestionara los mensajes de la cola de confirmacion de registro a eventos
  ERCQLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "EventRegisterConfirmationQueueLambda"
      Handler: lambda_function_register_confirmation.lambda_handler # Nombre del archivo y la función handler en Python
      Runtime: python3.9
      Environment:
        Variables:
          QUEUE_URL: !GetAtt EventRegisterConfirmationQueue.QueueUrl
          REGISTERS_BUCKET: !Ref EventRegistersBucket
          SENDER_EMAIL: !Ref SESVerifiedSenderEmailIdentity # Dirección de correo verificada en SES
          EMAIL_TEMPLATE: !Ref EmailTemplate
      Code:
        S3Bucket: !Ref SourceCodeBucketName # Referencia al bucket creado en CloudFormation
        S3Key: lambda_function_register_confirmation.zip # Archivo zip subido a S3 que contiene el código
      MemorySize: 128 # Memoria personalizada para la Lambda (en MB)
      Timeout: 25 # Timeout personalizado de 25 segundos
      Role: !GetAtt ERCQLambdaExecutionRole.Arn # Role que la función Lambda asumirá

  # Asociar la cola SQS como trigger para la función Lambda que gestionara sus mensajes
  ERCQLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt EventRegisterConfirmationQueue.Arn
      FunctionName: !Ref ERCQLambda
      Enabled: True

  # Rol para la lambda que registrara los asistentes a los eventos
  AttendeeRegisterLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow" # Permite la acción descrita
          Principal:
            Service: "lambda.amazonaws.com" # El servicio que asume este rol, en este caso Lambda
          Action:
            - "sts:AssumeRole" # Acción que permite a Lambda asumir este rol

      # Aquí definimos las políticas que se adjuntarán al rol, otorgando permisos específicos a Lambda
      Policies:
        - PolicyName: "AttendeeRegisterLambdaExecution" # Nombre de la política personalizada
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow" # Permite la acción descrita
                Action:
                  - "logs:CreateLogGroup" # Permite la creación de un grupo de logs en CloudWatch
                  - "logs:CreateLogStream" # Permite la creación de un stream de logs en CloudWatch
                  - "logs:PutLogEvents" # Permite escribir eventos de logs en CloudWatch
                Resource: "*" # Aplica los permisos a todos los recursos descritos anteriormente
              - Effect: "Allow" # Permite la acción descrita
                Action:
                  - "sqs:SendMessage" # Permite enviar mensajes a la cola
                  - "sqs:GetQueueAttributes" # Permite obtener los atributos de la cola
                Resource: !GetAtt EventRegisterConfirmationQueue.Arn
              - Effect: "Allow" # Permite la acción descrita
                Action:
                  - "dynamodb:PutItem"
                Resource: !GetAtt AttendeesTable.Arn
              - Effect: "Allow" # Permite la acción descrita
                Action:
                  - "dynamodb:Query"
                Resource:
                  - !GetAtt EventRegistersTable.Arn
                  - !Sub "${EventRegistersTable.Arn}/index/EventIDIndex"
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt EventRegistersTable.Arn
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                Resource: !ImportValue EventsTableArn

  # Lambda que registrara los asistentes a los eventos
  AttendeeRegisterLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "AttendeeRegisterLambda"
      Handler: lambda_function_attendee_register.lambda_handler # Nombre del archivo y la función handler en Python
      Runtime: python3.9
      Environment:
        Variables:
          ATTENDEES_TABLE_NAME: !Ref AttendeesTable
          EVENT_REGISTERS_TABLE_NAME: !Ref EventRegistersTable
          QUEUE_URL: !GetAtt EventRegisterConfirmationQueue.QueueUrl
          EVENTS_TABLE_NAME: !ImportValue EventsTableName
      Code:
        S3Bucket: !Ref SourceCodeBucketName # Referencia al bucket creado en CloudFormation
        S3Key: lambda_function_attendee_register.zip # Archivo zip subido a S3 que contiene el código
      MemorySize: 128 # Memoria personalizada para la Lambda (en MB)
      Timeout: 25 # Timeout personalizado de 25 segundos
      Role: !GetAtt AttendeeRegisterLambdaExecutionRole.Arn # Role que la función Lambda asumirá

Outputs:
  # Exporta el ARN de la lambda AttendeeRegister
  AttendeeRegisterLambdaArn:
    Value: !GetAtt AttendeeRegisterLambda.Arn
    Export:
      Name: AttendeeRegisterLambdaArn

  # Output que muestra el nombre del bucket que guarda los json de registro de asistentes a eventos
  EventRegisterBucketName:
    Value: !Ref EventRegistersBucketName
    Export:
      Name: EventRegisterBucketName
